/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //https://leetcode.com/problems/check-completeness-of-a-binary-tree/description/
class Solution {
public:
    bool isCompleteTree(TreeNode* root) {
        int totalNodes = countNodes(root);
        return dfsHelper(root, 1, totalNodes);
    }

    int countNodes(TreeNode* root){
        if(root==NULL) return 0;
        return 1 + countNodes(root->left) + countNodes(root->right);
    }

    bool dfsHelper(TreeNode* root, int idx, int total){
        if(root==NULL) return true;
        if(idx > total) return false;

        return dfsHelper(root->left, 2*idx, total) && dfsHelper(root->right, 2*idx+1, total);
    }
};